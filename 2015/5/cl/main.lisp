(defparameter *vowels* '(#\a #\e #\i #\o #\u))
(defun count-vowels (line)
  (cond ((string= line "") 0)
	((member (char line 0) *vowels*) (1+ (count-vowels (subseq line 1))))
	(t (count-vowels (subseq line 1)))))
(defun contains-n-vowels (line n)
  (>= (count-vowels line) n))
(defun contains-n-in-a-row (line n)
  (labels ((recursive-helper-function (line internal-n c)
	     (cond ((= internal-n 0) t)
		   ((= (length line) 0) nil)
		   ((not (string= (subseq line 0 1) c)) (recursive-helper-function line n (subseq line 0 1)))
		   (t (recursive-helper-function (subseq line 1)
						     (1- internal-n)
						     c)))))
    (if (= (length line) 0)
	nil
	(recursive-helper-function line n (subseq line 0 1)))))
(defmacro or-naughty-syllables (syllables line)
  `(or ,@(map 'list #'(lambda (syl)
		   `(cl-ppcre:scan ,syl ,line))
	      syllables)))
(defun contains-naughty-syllables (line)
  (or-naughty-syllables ("ab" "cd" "pq" "xy") line))
(defun nice-line-p (line)
  (and (contains-n-vowels line 3)
       (contains-n-in-a-row line 2)
       (not (contains-naughty-syllables line))))
(defun solve-puzzle ()
  (let ((nice-words 0))
    (with-open-file (in "../input.txt")
      (loop for line = (read-line in nil nil)
	    while line
	    do (when (nice-line-p line)
		 (incf nice-words))))
    nice-words))
